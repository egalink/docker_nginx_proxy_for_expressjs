# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#
# DOCS:
#
# Use predefined variables:
# https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
#

trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildNumber)'

stages:

# stage 1: Build Artifact...
- stage: Build
  displayName: Build Artifact
  jobs:

  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - script: |
        docker-compose -f $(System.DefaultWorkingDirectory)/docker-compose.yml build
        docker images --filter=reference=$(docker-compose -f $(System.DefaultWorkingDirectory)/docker-compose.yml config --services)
        
        # This script will build the images using docker-compose build and then save the images
        # as a tar file named images.tar in the current working directory:
        docker save $(docker-compose -f $(System.DefaultWorkingDirectory)/docker-compose.yml config --services) > images.tar

        ## If you want to save each image as a separate tar file, you can modify the script
        ## as follows:

        ## This script uses the docker-compose config command to get the list of services,
        ## and then iterates over the list using a for loop. For each service, it saves the
        ## image as a tar file with the same name as the service.

        # ---> for service in $(docker-compose -f docker-compose.yml config --services); do
        # --->   docker save $service > $service.tar
        # ---> done

        # docker load -i "images.tar"
      displayName: 'Build images'

    - script: |
        cd '$(System.DefaultWorkingDirectory)'
        ls -lSha | grep *.tar

        mkdir -p artifact
        cp docker-compose.yml ./artifact/
        mv images.tar ./artifact/
        cd ./artifact/
        ls -lSha
      displayName: 'Find Artifact'
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/artifact'
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(tag).zip'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish $(tag).tar'
      inputs:
        artifactName: '$(System.TeamProject)'
        targetPath: '$(Build.ArtifactStagingDirectory)/$(tag).tar'
